"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const transaction_1 = require("./transaction");
const offer_1 = require("./offer");
const institutionalInvestorOffer_1 = require("./institutionalInvestorOffer");
const market_1 = require("./market");
const lib_1 = require("./lib");
const dailyInformation_1 = require("./dailyInformation");
class Stock {
    constructor(data) {
        this.queryTime = data._attributes.querytime;
        this.name = data.TBL_StockInfo.JongName;
        this.change = lib_1.default.getChange(data.TBL_StockInfo.DungRak, data.TBL_StockInfo.Debi);
        [['price', 'CurJuka'],
            ['previousPrice', 'PrevJuka'],
            ['volume', 'Volume'],
            ['tradingVolume', 'Money'],
            ['start', 'StartJuka'],
            ['high', 'HighJuka'],
            ['low', 'LowJuka'],
            ['high52', 'High52'],
            ['low52', 'Low52'],
            ['up', 'UpJuka'],
            ['down', 'DownJuka'],
            ['per', 'Per'],
            ['amount', 'Amount'],
            ['faceValue', 'FaceJuka'],
        ].forEach(value => this[value[0]] = lib_1.default.getNumber(data.TBL_StockInfo[value[1]]));
        this.bid = [0, 1, 2, 3, 4].map(value => new offer_1.default(data.TBL_Hoga['mesuHoka' + value], data.TBL_Hoga['mesuJan' + value]));
        this.ask = [0, 1, 2, 3, 4].map(value => new offer_1.default(data.TBL_Hoga['medoHoka' + value], data.TBL_Hoga['medoJan' + value]));
        this.daily = data.TBL_DailyStock.map(value => new dailyInformation_1.default(value));
        const ask = [];
        const bid = [];
        data.TBL_AskPrice.forEach(value => {
            ask.push(new institutionalInvestorOffer_1.default(value.member_memdoMem, value.member_memdoVol));
            bid.push(new institutionalInvestorOffer_1.default(value.member_memsoMem, value.member_mesuoVol));
        });
        this.institutionalInvestorAsk = ask;
        this.institutionalInvestorBid = bid;
        this.transactions = data.TBL_TimeConclude.map(value => new transaction_1.default(value));
        this.kosdaq = new market_1.default('KOSDAQ', lib_1.default.getNumber(data.stockInfo.kosdaqJisu), lib_1.default.getChange(data.stockInfo.kosdaqJisuBuho, data.stockInfo.kosdaqJisuDebi));
        this.kospi = new market_1.default('KOSPI', lib_1.default.getNumber(data.stockInfo.kospiJisu), lib_1.default.getChange(data.stockInfo.kospiBuho, data.stockInfo.kospiDebi));
        this.krx100 = new market_1.default('KRX100', lib_1.default.getNumber(data.stockInfo.krx100Jisu), lib_1.default.getChange(data.stockInfo.krx100buho, data.stockInfo.krx100Debi));
        this.kospi200 = new market_1.default('KOSPI200', lib_1.default.getNumber(data.stockInfo.kospi200Jisu), lib_1.default.getChange(data.stockInfo.kospi200Buho, data.stockInfo.kospi200Debi));
        this.marketOpen = data.stockInfo.myJangGubun === '장중';
    }
    ;
}
exports.default = Stock;
